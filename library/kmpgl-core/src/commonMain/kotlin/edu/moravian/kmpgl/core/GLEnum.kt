@file:Suppress("unused", "NOTHING_TO_INLINE")

package edu.moravian.kmpgl.core

import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmName

enum class Capability(@JvmField val value: Int) {
    // Used with isEnabled, enable, disable, and getBool (does the same thing as isEnabled)
    BLEND(GL.BLEND),
    CULL_FACE(GL.CULL_FACE),
    DEPTH_TEST(GL.DEPTH_TEST),
    DITHER(GL.DITHER),
    POLYGON_OFFSET_FILL(GL.POLYGON_OFFSET_FILL),
    SAMPLE_ALPHA_TO_COVERAGE(GL.SAMPLE_ALPHA_TO_COVERAGE),
    SAMPLE_COVERAGE(GL.SAMPLE_COVERAGE),
    SCISSOR_TEST(GL.SCISSOR_TEST),
    STENCIL_TEST(GL.STENCIL_TEST),
    @GLES3 RASTERIZER_DISCARD(GL.RASTERIZER_DISCARD),
    @GLES3 PRIMITIVE_RESTART_FIXED_INDEX(GL.PRIMITIVE_RESTART_FIXED_INDEX);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class ParamString(@JvmField val value: Int) {
    VENDOR(GL.VENDOR), RENDERER(GL.RENDERER), VERSION(GL.VERSION),
    EXTENSIONS(GL.EXTENSIONS), SHADING_LANGUAGE_VERSION(GL.SHADING_LANGUAGE_VERSION);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class ParamBool(@JvmField val value: Int) {
    // From capabilities
    BLEND(GL.BLEND),
    CULL_FACE(GL.CULL_FACE),
    DEPTH_TEST(GL.DEPTH_TEST),
    DITHER(GL.DITHER),
    POLYGON_OFFSET_FILL(GL.POLYGON_OFFSET_FILL),
    SAMPLE_ALPHA_TO_COVERAGE(GL.SAMPLE_ALPHA_TO_COVERAGE),
    SAMPLE_COVERAGE(GL.SAMPLE_COVERAGE),
    SCISSOR_TEST(GL.SCISSOR_TEST),
    STENCIL_TEST(GL.STENCIL_TEST),
    @GLES3 RASTERIZER_DISCARD(GL.RASTERIZER_DISCARD),
    @GLES3 PRIMITIVE_RESTART_FIXED_INDEX(GL.PRIMITIVE_RESTART_FIXED_INDEX),

    // Others
    SHADER_COMPILER(GL.SHADER_COMPILER), DEPTH_WRITEMASK(GL.DEPTH_WRITEMASK),
    SAMPLE_COVERAGE_INVERT(GL.SAMPLE_COVERAGE_INVERT),
    @GLES3 TRANSFORM_FEEDBACK_PAUSED(GL.TRANSFORM_FEEDBACK_PAUSED),
    @GLES3 TRANSFORM_FEEDBACK_ACTIVE(GL.TRANSFORM_FEEDBACK_ACTIVE);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class ParamInt(@JvmField val value: Int) {
    SUBPIXEL_BITS(GL.SUBPIXEL_BITS), RED_BITS(GL.RED_BITS), GREEN_BITS(GL.GREEN_BITS), BLUE_BITS(GL.BLUE_BITS),
    ALPHA_BITS(GL.ALPHA_BITS), DEPTH_BITS(GL.DEPTH_BITS), STENCIL_BITS(GL.STENCIL_BITS),
    MAX_TEXTURE_SIZE(GL.MAX_TEXTURE_SIZE), MAX_RENDERBUFFER_SIZE(GL.MAX_RENDERBUFFER_SIZE),
    MAX_CUBE_MAP_TEXTURE_SIZE(GL.MAX_CUBE_MAP_TEXTURE_SIZE), MAX_VERTEX_ATTRIBS(GL.MAX_VERTEX_ATTRIBS),
    MAX_TEXTURE_IMAGE_UNITS(GL.MAX_TEXTURE_IMAGE_UNITS), MAX_VERTEX_TEXTURE_IMAGE_UNITS(GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS),
    MAX_COMBINED_TEXTURE_IMAGE_UNITS(GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS), MAX_VERTEX_UNIFORM_VECTORS(GL.MAX_VERTEX_UNIFORM_VECTORS),
    MAX_VARYING_VECTORS(GL.MAX_VARYING_VECTORS), MAX_FRAGMENT_UNIFORM_VECTORS(GL.MAX_FRAGMENT_UNIFORM_VECTORS),
    NUM_COMPRESSED_TEXTURE_FORMATS(GL.NUM_COMPRESSED_TEXTURE_FORMATS), NUM_SHADER_BINARY_FORMATS(GL.NUM_SHADER_BINARY_FORMATS),
    STENCIL_CLEAR_VALUE(GL.STENCIL_CLEAR_VALUE), STENCIL_REF(GL.STENCIL_REF), STENCIL_BACK_REF(GL.STENCIL_BACK_REF),
    SAMPLE_BUFFERS(GL.SAMPLE_BUFFERS), SAMPLES(GL.SAMPLES),
    UNPACK_ALIGNMENT(GL.UNPACK_ALIGNMENT), PACK_ALIGNMENT(GL.PACK_ALIGNMENT),

    @GLES3 NUM_EXTENSIONS(GL.NUM_EXTENSIONS),
    @GLES3 MAJOR_VERSION(GL.MAJOR_VERSION), @GLES3 MINOR_VERSION(GL.MINOR_VERSION),
    @GLES3 MAX_3D_TEXTURE_SIZE(GL.MAX_3D_TEXTURE_SIZE), @GLES3 MAX_ELEMENTS_INDICES(GL.MAX_ELEMENTS_INDICES),
    @GLES3 MAX_ELEMENTS_VERTICES(GL.MAX_ELEMENTS_VERTICES), @GLES3 MAX_DRAW_BUFFERS(GL.MAX_DRAW_BUFFERS),
    @GLES3 MAX_ARRAY_TEXTURE_LAYERS(GL.MAX_ARRAY_TEXTURE_LAYERS), @GLES3 MAX_VERTEX_UNIFORM_BLOCKS(GL.MAX_VERTEX_UNIFORM_BLOCKS),
    @GLES3 MIN_PROGRAM_TEXEL_OFFSET(GL.MIN_PROGRAM_TEXEL_OFFSET), @GLES3 MAX_PROGRAM_TEXEL_OFFSET(GL.MAX_PROGRAM_TEXEL_OFFSET),
    @GLES3 MAX_FRAGMENT_UNIFORM_BLOCKS(GL.MAX_FRAGMENT_UNIFORM_BLOCKS), @GLES3 MAX_COMBINED_UNIFORM_BLOCKS(GL.MAX_COMBINED_UNIFORM_BLOCKS),
    @GLES3 MAX_UNIFORM_BUFFER_BINDINGS(GL.MAX_UNIFORM_BUFFER_BINDINGS), @GLES3 MAX_FRAGMENT_UNIFORM_COMPONENTS(GL.MAX_FRAGMENT_UNIFORM_COMPONENTS),
    @GLES3 MAX_VERTEX_UNIFORM_COMPONENTS(GL.MAX_VERTEX_UNIFORM_COMPONENTS), @GLES3 MAX_VARYING_COMPONENTS(GL.MAX_VARYING_COMPONENTS),
    @GLES3 MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS(GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS),
    @GLES3 MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS(GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS),
    @GLES3 MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS(GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS),
    @GLES3 MAX_COLOR_ATTACHMENTS(GL.MAX_COLOR_ATTACHMENTS), @GLES3 MAX_SAMPLES(GL.MAX_SAMPLES),
    @GLES3 MAX_VERTEX_OUTPUT_COMPONENTS(GL.MAX_VERTEX_OUTPUT_COMPONENTS), @GLES3 MAX_FRAGMENT_INPUT_COMPONENTS(GL.MAX_FRAGMENT_INPUT_COMPONENTS),
    @GLES3 NUM_PROGRAM_BINARY_FORMATS(GL.NUM_PROGRAM_BINARY_FORMATS),
    @GLES3 UNIFORM_BUFFER_OFFSET_ALIGNMENT(GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT),
    @GLES3 UNPACK_ROW_LENGTH(GL.UNPACK_ROW_LENGTH), @GLES3 UNPACK_SKIP_ROWS(GL.UNPACK_SKIP_ROWS), @GLES3 UNPACK_SKIP_PIXELS(GL.UNPACK_SKIP_PIXELS),
    @GLES3 UNPACK_SKIP_IMAGES(GL.UNPACK_SKIP_IMAGES), @GLES3 UNPACK_IMAGE_HEIGHT(GL.UNPACK_IMAGE_HEIGHT),
    @GLES3 PACK_ROW_LENGTH(GL.PACK_ROW_LENGTH), @GLES3 PACK_SKIP_ROWS(GL.PACK_SKIP_ROWS), @GLES3 PACK_SKIP_PIXELS(GL.PACK_SKIP_PIXELS),

    // Ints that are actually enum constants
    BLEND_EQUATION(GL.BLEND_EQUATION), BLEND_EQUATION_RGB(GL.BLEND_EQUATION_RGB), BLEND_EQUATION_ALPHA(GL.BLEND_EQUATION_ALPHA), // BlendEq
    BLEND_DST_RGB(GL.BLEND_DST_RGB), BLEND_SRC_RGB(GL.BLEND_SRC_RGB), BLEND_DST_ALPHA(GL.BLEND_DST_ALPHA), BLEND_SRC_ALPHA(GL.BLEND_SRC_ALPHA), // BlendFunc
    DEPTH_FUNC(GL.DEPTH_FUNC), // ComparisonFunc
    STENCIL_FUNC(GL.STENCIL_FUNC), STENCIL_BACK_FUNC(GL.STENCIL_BACK_FUNC), // ComparisonFunc
    STENCIL_FAIL(GL.STENCIL_FAIL), STENCIL_PASS_DEPTH_FAIL(GL.STENCIL_PASS_DEPTH_FAIL), STENCIL_PASS_DEPTH_PASS(GL.STENCIL_PASS_DEPTH_PASS), // StencilOp
    STENCIL_BACK_FAIL(GL.STENCIL_BACK_FAIL), STENCIL_BACK_PASS_DEPTH_FAIL(GL.STENCIL_BACK_PASS_DEPTH_FAIL), STENCIL_BACK_PASS_DEPTH_PASS(GL.STENCIL_BACK_PASS_DEPTH_PASS), // StencilOp
    CULL_FACE_MODE(GL.CULL_FACE_MODE), // Face (FRONT, BACK, FRONT_AND_BACK)
    FRONT_FACE(GL.FRONT_FACE), // FaceDir (CW or CCW)
    GENERATE_MIPMAP_HINT(GL.GENERATE_MIPMAP_HINT), @GLES3 FRAGMENT_SHADER_DERIVATIVE_HINT(GL.FRAGMENT_SHADER_DERIVATIVE_HINT), // HintMode
    IMPLEMENTATION_COLOR_READ_TYPE(GL.IMPLEMENTATION_COLOR_READ_TYPE), // PixelType
    IMPLEMENTATION_COLOR_READ_FORMAT(GL.IMPLEMENTATION_COLOR_READ_FORMAT), // PixelFormat
    @GLES3 READ_BUFFER(GL.READ_BUFFER), // BufferColorTarget
    @GLES3 DRAW_BUFFER0(GL.DRAW_BUFFER0), @GLES3 DRAW_BUFFER1(GL.DRAW_BUFFER1), @GLES3 DRAW_BUFFER2(GL.DRAW_BUFFER2),
    @GLES3 DRAW_BUFFER3(GL.DRAW_BUFFER3), @GLES3 DRAW_BUFFER4(GL.DRAW_BUFFER4), @GLES3 DRAW_BUFFER5(GL.DRAW_BUFFER5),
    @GLES3 DRAW_BUFFER6(GL.DRAW_BUFFER6), @GLES3 DRAW_BUFFER7(GL.DRAW_BUFFER7), @GLES3 DRAW_BUFFER8(GL.DRAW_BUFFER8),
    @GLES3 DRAW_BUFFER9(GL.DRAW_BUFFER9), @GLES3 DRAW_BUFFER10(GL.DRAW_BUFFER10), @GLES3 DRAW_BUFFER11(GL.DRAW_BUFFER11),
    @GLES3 DRAW_BUFFER12(GL.DRAW_BUFFER12), @GLES3 DRAW_BUFFER13(GL.DRAW_BUFFER13), @GLES3 DRAW_BUFFER14(GL.DRAW_BUFFER14),
    @GLES3 DRAW_BUFFER15(GL.DRAW_BUFFER15),

    // Ints that are actually object ids
    CURRENT_PROGRAM(GL.CURRENT_PROGRAM), // GLProgram
    FRAMEBUFFER_BINDING(GL.FRAMEBUFFER_BINDING), // GLFramebuffer
    @GLES3 DRAW_FRAMEBUFFER_BINDING(GL.DRAW_FRAMEBUFFER_BINDING), // GLFramebuffer
    @GLES3 READ_FRAMEBUFFER_BINDING(GL.READ_FRAMEBUFFER_BINDING), // GLFramebuffer
    RENDERBUFFER_BINDING(GL.RENDERBUFFER_BINDING), // GLRenderbuffer
    @GLES3 SAMPLER_BINDING(GL.SAMPLER_BINDING), // GLSampler
    @GLES3 TRANSFORM_FEEDBACK_BINDING(GL.TRANSFORM_FEEDBACK_BINDING), // GLTransformFeedback
    @GLES3 VERTEX_ARRAY_BINDING(GL.VERTEX_ARRAY_BINDING), // GLVertexArrayObject
    ACTIVE_TEXTURE(GL.ACTIVE_TEXTURE), // GLTexture
    TEXTURE_BINDING_2D(GL.TEXTURE_BINDING_2D), // GLTexture
    TEXTURE_BINDING_CUBE_MAP(GL.TEXTURE_BINDING_CUBE_MAP), // GLTexture
    @GLES3 TEXTURE_BINDING_3D(GL.TEXTURE_BINDING_3D), // GLTexture
    @GLES3 TEXTURE_BINDING_2D_ARRAY(GL.TEXTURE_BINDING_2D_ARRAY), // GLTexture
    ARRAY_BUFFER_BINDING(GL.ARRAY_BUFFER_BINDING), // GLBuffer
    ELEMENT_ARRAY_BUFFER_BINDING(GL.ELEMENT_ARRAY_BUFFER_BINDING), // GLBuffer
    @GLES3 PIXEL_PACK_BUFFER_BINDING(GL.PIXEL_PACK_BUFFER_BINDING), // GLBuffer
    @GLES3 PIXEL_UNPACK_BUFFER_BINDING(GL.PIXEL_UNPACK_BUFFER_BINDING), // GLBuffer
    @GLES3 COPY_READ_BUFFER_BINDING(GL.COPY_READ_BUFFER_BINDING), // GLBuffer
    @GLES3 COPY_WRITE_BUFFER_BINDING(GL.COPY_WRITE_BUFFER_BINDING); // GLBuffer

    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class FramebufferBinding(@JvmField val value: Int) {
    FRAMEBUFFER(GL.FRAMEBUFFER), @GLES3 DRAW(GL.DRAW_FRAMEBUFFER), @GLES3 READ(GL.READ_FRAMEBUFFER);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class TextureBinding(@JvmField val value: Int) {
    ACTIVE(GL.ACTIVE_TEXTURE), TB_2D(GL.TEXTURE_BINDING_2D),
    CUBE_MAP(GL.TEXTURE_BINDING_CUBE_MAP),
    @GLES3 TB_3D(GL.TEXTURE_BINDING_3D),
    @GLES3 TB_2D_ARRAY(GL.TEXTURE_BINDING_2D_ARRAY);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class BufferBinding(@JvmField val value: Int) {
    ARRAY(GL.ARRAY_BUFFER_BINDING),
    ELEMENT_ARRAY(GL.ELEMENT_ARRAY_BUFFER_BINDING),
    @GLES3 PIXEL_PACK(GL.PIXEL_PACK_BUFFER_BINDING),
    @GLES3 PIXEL_UNPACK(GL.PIXEL_UNPACK_BUFFER_BINDING),
    @GLES3 COPY_READ(GL.COPY_READ_BUFFER_BINDING),
    @GLES3 COPY_WRITE(GL.COPY_WRITE_BUFFER_BINDING);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class ParamUInt(@JvmField val value: Int) {
    STENCIL_VALUE_MASK(GL.STENCIL_VALUE_MASK), STENCIL_WRITEMASK(GL.STENCIL_WRITEMASK),
    STENCIL_BACK_VALUE_MASK(GL.STENCIL_BACK_VALUE_MASK), STENCIL_BACK_WRITEMASK(GL.STENCIL_BACK_WRITEMASK);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class ParamLong(@JvmField val value: Int) {
    MAX_UNIFORM_BLOCK_SIZE(GL.MAX_UNIFORM_BLOCK_SIZE),
    MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS(GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS),
    MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS(GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS),
    MAX_ELEMENT_INDEX(GL.MAX_ELEMENT_INDEX),
    MAX_SERVER_WAIT_TIMEOUT(GL.MAX_SERVER_WAIT_TIMEOUT);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class ParamFloat(@JvmField val value: Int) {
    @GLES3 MAX_TEXTURE_LOD_BIAS(GL.MAX_TEXTURE_LOD_BIAS),
    DEPTH_CLEAR_VALUE(GL.DEPTH_CLEAR_VALUE),
    LINE_WIDTH(GL.LINE_WIDTH),
    POLYGON_OFFSET_UNITS(GL.POLYGON_OFFSET_UNITS),
    POLYGON_OFFSET_FACTOR(GL.POLYGON_OFFSET_FACTOR),
    SAMPLE_COVERAGE_VALUE(GL.SAMPLE_COVERAGE_VALUE);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class ParamBools(@JvmField val value: Int, @JvmField val count: Int) {
    COLOR_WRITEMASK(GL.COLOR_WRITEMASK, 4);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class ParamInts(@JvmField val value: Int, @JvmField val count: Int) {
    MAX_VIEWPORT_DIMS(GL.MAX_VIEWPORT_DIMS, 2),
    VIEWPORT(GL.VIEWPORT, 4),
    SCISSOR_BOX(GL.SCISSOR_BOX, 4);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class ParamUInts(@JvmField val value: Int, @JvmField val countField: Int) {
    COMPRESSED_TEXTURE_FORMATS(GL.COMPRESSED_TEXTURE_FORMATS, GL.NUM_COMPRESSED_TEXTURE_FORMATS),
    @GLES3 PROGRAM_BINARY_FORMATS(GL.PROGRAM_BINARY_FORMATS, GL.NUM_PROGRAM_BINARY_FORMATS),
    SHADER_BINARY_FORMATS(GL.SHADER_BINARY_FORMATS, GL.NUM_SHADER_BINARY_FORMATS);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class ParamFloats(@JvmField val value: Int, @JvmField val count: Int) {
    ALIASED_POINT_SIZE_RANGE(GL.ALIASED_POINT_SIZE_RANGE, 2),
    ALIASED_LINE_WIDTH_RANGE(GL.ALIASED_LINE_WIDTH_RANGE, 2),
    DEPTH_RANGE(GL.DEPTH_RANGE, 2),
    BLEND_COLOR(GL.BLEND_COLOR, 4),
    COLOR_CLEAR_VALUE(GL.COLOR_CLEAR_VALUE, 4);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class ParamColor(@JvmField val value: Int, @JvmField val count: Int) {
    BLEND_COLOR(GL.BLEND_COLOR, 4),
    COLOR_CLEAR_VALUE(GL.COLOR_CLEAR_VALUE, 4);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

// TODO: indexed params:
//@GLES3 UNIFORM_BUFFER_BINDING // GLBuffer
//@GLES3 TRANSFORM_FEEDBACK_BUFFER_BINDING // GLBuffer
//@GLES3 UNIFORM_BUFFER_START // int
//@GLES3 UNIFORM_BUFFER_SIZE // int
//@GLES3 TRANSFORM_FEEDBACK_BUFFER_START // int
//@GLES3 TRANSFORM_FEEDBACK_BUFFER_SIZE // int

enum class HintTarget(@JvmField val value: Int) {
    GENERATE_MIPMAP_HINT(GL.GENERATE_MIPMAP_HINT),
    @GLES3 FRAGMENT_SHADER_DERIVATIVE_HINT(GL.FRAGMENT_SHADER_DERIVATIVE_HINT),
    FRAGMENT_SHADER_DERIVATIVE_HINT_OES(OES_standard_derivatives.FRAGMENT_SHADER_DERIVATIVE_HINT_OES); // same as FRAGMENT_SHADER_DERIVATIVE_HINT
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class HintMode(@JvmField val value: Int) {
    FASTEST(GL.FASTEST), NICEST(GL.NICEST), DONT_CARE(GL.DONT_CARE);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class ComparisonFunc(@JvmField val value: Int) {
    NEVER(GL.NEVER), ALWAYS(GL.ALWAYS), NOTEQUAL(GL.NOTEQUAL),
    LESS(GL.LESS), LEQUAL(GL.LEQUAL), EQUAL(GL.EQUAL), GEQUAL(GL.GEQUAL), GREATER(GL.GREATER);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class ComparisonMode(@JvmField val value: Int) {
    NONE(GL.NONE), COMPARE_REF_TO_TEXTURE(GL.COMPARE_REF_TO_TEXTURE);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class BlendFunc(@JvmField val value: Int) {
    ZERO(GL.ZERO), ONE(GL.ONE),
    SRC_COLOR(GL.SRC_COLOR), ONE_MINUS_SRC_COLOR(GL.ONE_MINUS_SRC_COLOR),
    DST_COLOR(GL.DST_COLOR), ONE_MINUS_DST_COLOR(GL.ONE_MINUS_DST_COLOR),
    SRC_ALPHA(GL.SRC_ALPHA), ONE_MINUS_SRC_ALPHA(GL.ONE_MINUS_SRC_ALPHA),
    DST_ALPHA(GL.DST_ALPHA), ONE_MINUS_DST_ALPHA(GL.ONE_MINUS_DST_ALPHA),
    CONSTANT_COLOR(GL.CONSTANT_COLOR), ONE_MINUS_CONSTANT_COLOR(GL.ONE_MINUS_CONSTANT_COLOR),
    CONSTANT_ALPHA(GL.CONSTANT_ALPHA), ONE_MINUS_CONSTANT_ALPHA(GL.ONE_MINUS_CONSTANT_ALPHA),
    SRC_ALPHA_SATURATE(GL.SRC_ALPHA_SATURATE);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class BlendEq(@JvmField val value: Int) {
    ADD(GL.FUNC_ADD), SUBTRACT(GL.FUNC_SUBTRACT), REVERSE_SUBTRACT(GL.FUNC_REVERSE_SUBTRACT),
    @GLES3 MIN(GL.MIN), @GLES3 MAX(GL.MAX),
    MIN_EXT(EXT_blend_minmax.MIN_EXT), MAX_EXT(EXT_blend_minmax.MAX_EXT); // same as MIN/MAX
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class Face(@JvmField val value: Int) {
    NONE(GL.NONE), // not always allowed
    FRONT(GL.FRONT), BACK(GL.BACK),
    FRONT_AND_BACK(GL.FRONT_AND_BACK);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class FaceDir(@JvmField val value: Int) {
    CW(GL.CW), CCW(GL.CCW);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class StencilOp(@JvmField val value: Int) {
    KEEP(GL.KEEP), ZERO(GL.ZERO), REPLACE(GL.REPLACE), INVERT(GL.INVERT),
    INCR(GL.INCR), DECR(GL.DECR), INCR_WRAP(GL.INCR_WRAP), DECR_WRAP(GL.DECR_WRAP);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class PixelStoreParam(@JvmField val value: Int) {
    PACK_ALIGNMENT(GL.PACK_ALIGNMENT),
    UNPACK_ALIGNMENT(GL.UNPACK_ALIGNMENT),
    @GLES3 PACK_ROW_LENGTH(GL.PACK_ROW_LENGTH),
    @GLES3 PACK_SKIP_ROWS(GL.PACK_SKIP_ROWS),
    @GLES3 PACK_SKIP_PIXELS(GL.PACK_SKIP_PIXELS),
    @GLES3 UNPACK_ROW_LENGTH(GL.UNPACK_ROW_LENGTH),
    @GLES3 UNPACK_SKIP_ROWS(GL.UNPACK_SKIP_ROWS),
    @GLES3 UNPACK_SKIP_PIXELS(GL.UNPACK_SKIP_PIXELS),
    @GLES3 UNPACK_SKIP_IMAGES(GL.UNPACK_SKIP_IMAGES),
    @GLES3 UNPACK_IMAGE_HEIGHT(GL.UNPACK_IMAGE_HEIGHT);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class BufferBit(val value: UInt) {
    COLOR(GL.COLOR_BUFFER_BIT), DEPTH(GL.DEPTH_BUFFER_BIT), STENCIL(GL.STENCIL_BUFFER_BIT);
    companion object { fun from(value: UInt) = entries.first { it.value == value } }
    operator fun plus(other: BufferBit) = BufferBits(this, other)
}
typealias BufferBits = Set<BufferBit>
@Suppress("FunctionName")
inline fun BufferBits(vararg bits: BufferBit) = bits.toSet()
@Suppress("FunctionName")
inline fun BufferBits(bits: UInt) = BufferBit.entries.filter { (it.value and bits) != 0u }.toSet()
inline val BufferBits.value @JvmName("BufferBitsGetValue") get() = sumOf { it.value }

enum class DrawMode(@JvmField val value: Int) {
    POINTS(GL.POINTS),
    LINES(GL.LINES), LINE_LOOP(GL.LINE_LOOP), LINE_STRIP(GL.LINE_STRIP),
    TRIANGLES(GL.TRIANGLES), TRIANGLE_STRIP(GL.TRIANGLE_STRIP), TRIANGLE_FAN(GL.TRIANGLE_FAN);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class ElementType(@JvmField val value: Int, @JvmField val size: Int) {
    UNSIGNED_BYTE(GL.UNSIGNED_BYTE, 1), UNSIGNED_SHORT(GL.UNSIGNED_SHORT, 2), UNSIGNED_INT(GL.UNSIGNED_INT, 4);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class DataType(
    @JvmField val value: Int, @JvmField val size: Int,
    @JvmField val isIntegral: Boolean = false, @JvmField val unsigned: Boolean = false,
) {
    BYTE(GL.BYTE, 1, true), UNSIGNED_BYTE(GL.UNSIGNED_BYTE, 1, true, true),
    SHORT(GL.SHORT, 2, true), UNSIGNED_SHORT(GL.UNSIGNED_SHORT, 2, true, true),
    FLOAT(GL.FLOAT, 4),

    @GLES3 HALF_FLOAT(GL.HALF_FLOAT, 2), @GLES3 FIXED(GL.FIXED, 4),
    @GLES3 INT(GL.INT, 4, true), @GLES3 UNSIGNED_INT(GL.UNSIGNED_INT, 4, true, true),
    @GLES3 INT_2_10_10_10_REV(GL.INT_2_10_10_10_REV, 4),
    @GLES3 UNSIGNED_INT_2_10_10_10_REV(GL.UNSIGNED_INT_2_10_10_10_REV, 4, unsigned = true);

    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class IntDataType(
    @JvmField val value: Int, @JvmField val size: Int,
    @JvmField val min: Int, @JvmField val max: Int, // max is a bit off for unsigned int
    @JvmField val unsigned: Boolean = false,
) {
    BYTE(GL.BYTE, Byte.SIZE_BYTES, Byte.MIN_VALUE.toInt(), Byte.MAX_VALUE.toInt()),
    UNSIGNED_BYTE(GL.UNSIGNED_BYTE, UByte.SIZE_BYTES, 0, UByte.MAX_VALUE.toInt(), true),
    SHORT(GL.SHORT, Short.SIZE_BYTES, Short.MIN_VALUE.toInt(), Short.MAX_VALUE.toInt()),
    UNSIGNED_SHORT(GL.UNSIGNED_SHORT, UShort.SIZE_BYTES, 0, UShort.MAX_VALUE.toInt(), true),
    @GLES3 INT(GL.INT, Int.SIZE_BYTES, Int.MIN_VALUE, Int.MAX_VALUE),
    @GLES3 UNSIGNED_INT(GL.UNSIGNED_INT, UInt.SIZE_BYTES, 0, UInt.MAX_VALUE.toInt(), true);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class ProgramParam(@JvmField val value: Int) {
    DELETE_STATUS(GL.DELETE_STATUS),
    LINK_STATUS(GL.LINK_STATUS),
    VALIDATE_STATUS(GL.VALIDATE_STATUS),
    //INFO_LOG_LENGTH(GL20.INFO_LOG_LENGTH),
    ATTACHED_SHADERS(GL.ATTACHED_SHADERS),
    ACTIVE_UNIFORMS(GL.ACTIVE_UNIFORMS),
    ACTIVE_UNIFORM_MAX_LENGTH(GL.ACTIVE_UNIFORM_MAX_LENGTH),
    ACTIVE_ATTRIBUTES(GL.ACTIVE_ATTRIBUTES),
    ACTIVE_ATTRIBUTE_MAX_LENGTH(GL.ACTIVE_ATTRIBUTE_MAX_LENGTH),
    @GLES3 TRANSFORM_FEEDBACK_BUFFER_MODE(GL.TRANSFORM_FEEDBACK_BUFFER_MODE),
    @GLES3 TRANSFORM_FEEDBACK_VARYINGS(GL.TRANSFORM_FEEDBACK_VARYINGS),
    @GLES3 ACTIVE_UNIFORM_BLOCKS(GL.ACTIVE_UNIFORM_BLOCKS),
    @GLES3 ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH(GL.ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH),
    @GLES3 TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH(GL.TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH),
    //@GLES3 PROGRAM_BINARY_LENGTH(GL.PROGRAM_BINARY_LENGTH),
    @GLES3 PROGRAM_BINARY_RETRIEVABLE_HINT(GL.PROGRAM_BINARY_RETRIEVABLE_HINT);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class TransformFeedbackMode(@JvmField val value: Int) {
    SEPARATE_ATTRIBS(GL.SEPARATE_ATTRIBS),
    INTERLEAVED_ATTRIBS(GL.INTERLEAVED_ATTRIBS);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class ShaderParam(@JvmField val value: Int) {
    DELETE_STATUS(GL.DELETE_STATUS),
    COMPILE_STATUS(GL.COMPILE_STATUS),
    //INFO_LOG_LENGTH(GL20.INFO_LOG_LENGTH),
    //SHADER_SOURCE_LENGTH(GL20.SHADER_SOURCE_LENGTH),
    SHADER_TYPE(GL.SHADER_TYPE); // ShaderType
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class ShaderType(@JvmField val value: Int) {
    VERTEX(GL.VERTEX_SHADER), FRAGMENT(GL.FRAGMENT_SHADER);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class PrecisionType(@JvmField val value: Int) {
    LOW_FLOAT(GL.LOW_FLOAT), MEDIUM_FLOAT(GL.MEDIUM_FLOAT), HIGH_FLOAT(GL.HIGH_FLOAT),
    LOW_INT(GL.LOW_INT), MEDIUM_INT(GL.MEDIUM_INT), HIGH_INT(GL.HIGH_INT);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class UniformParam(@JvmField val value: Int) {
    TYPE(GL.UNIFORM_TYPE), // UniformType
    SIZE(GL.UNIFORM_SIZE),
    NAME_LENGTH(GL.UNIFORM_NAME_LENGTH),
    BLOCK_INDEX(GL.UNIFORM_BLOCK_INDEX),
    OFFSET(GL.UNIFORM_OFFSET),
    ARRAY_STRIDE(GL.UNIFORM_ARRAY_STRIDE),
    MATRIX_STRIDE(GL.UNIFORM_MATRIX_STRIDE),
    IS_ROW_MAJOR(GL.UNIFORM_IS_ROW_MAJOR); // bool
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@Suppress("EnumEntryName")
enum class UniformType(@JvmField val value: Int) {
    FLOAT(GL.FLOAT), FLOAT_VEC2(GL.FLOAT_VEC2), FLOAT_VEC3(GL.FLOAT_VEC3), FLOAT_VEC4(GL.FLOAT_VEC4),
    INT(GL.INT), INT_VEC2(GL.INT_VEC2), INT_VEC3(GL.INT_VEC3), INT_VEC4(GL.INT_VEC4),
    BOOL(GL.BOOL), BOOL_VEC2(GL.BOOL_VEC2), BOOL_VEC3(GL.BOOL_VEC3), BOOL_VEC4(GL.BOOL_VEC4),
    FLOAT_MAT2(GL.FLOAT_MAT2), FLOAT_MAT3(GL.FLOAT_MAT3), FLOAT_MAT4(GL.FLOAT_MAT4),

    @GLES3 UNSIGNED_INT(GL.UNSIGNED_INT), @GLES3 UNSIGNED_INT_VEC2(GL.UNSIGNED_INT_VEC2),
    @GLES3 UNSIGNED_INT_VEC3(GL.UNSIGNED_INT_VEC3), @GLES3 UNSIGNED_INT_VEC4(GL.UNSIGNED_INT_VEC4),
    @GLES3 FLOAT_MAT2x3(GL.FLOAT_MAT2x3), @GLES3 FLOAT_MAT2x4(GL.FLOAT_MAT2x4),
    @GLES3 FLOAT_MAT3x2(GL.FLOAT_MAT3x2), @GLES3 FLOAT_MAT3x4(GL.FLOAT_MAT3x4),
    @GLES3 FLOAT_MAT4x2(GL.FLOAT_MAT4x2), @GLES3 FLOAT_MAT4x3(GL.FLOAT_MAT4x3),

    SAMPLER_2D(GL.SAMPLER_2D), SAMPLER_CUBE(GL.SAMPLER_CUBE), @GLES3 SAMPLER_2D_ARRAY(GL.SAMPLER_2D_ARRAY),
    @GLES3 SAMPLER_2D_SHADOW(GL.SAMPLER_2D_SHADOW), @GLES3 SAMPLER_CUBE_SHADOW(GL.SAMPLER_CUBE_SHADOW), @GLES3 SAMPLER_2D_ARRAY_SHADOW(GL.SAMPLER_2D_ARRAY_SHADOW),
    @GLES3 SAMPLER_3D(GL.SAMPLER_3D),

    @GLES3 INT_SAMPLER_2D(GL.INT_SAMPLER_2D), @GLES3 INT_SAMPLER_CUBE(GL.INT_SAMPLER_CUBE),
    @GLES3 INT_SAMPLER_2D_ARRAY(GL.INT_SAMPLER_2D_ARRAY), @GLES3 INT_SAMPLER_3D(GL.INT_SAMPLER_3D),

    @GLES3 UNSIGNED_INT_SAMPLER_2D(GL.UNSIGNED_INT_SAMPLER_2D), @GLES3 UNSIGNED_INT_SAMPLER_CUBE(GL.UNSIGNED_INT_SAMPLER_CUBE),
    @GLES3 UNSIGNED_INT_SAMPLER_2D_ARRAY(GL.UNSIGNED_INT_SAMPLER_2D_ARRAY), @GLES3 UNSIGNED_INT_SAMPLER_3D(GL.UNSIGNED_INT_SAMPLER_3D);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}
inline val NameTypeSize.typeEnum get() = UniformType.from(type)

@GLES3
enum class UniformBlockParam(@JvmField val value: Int) {
    BINDING(GL.UNIFORM_BLOCK_BINDING),
    DATA_SIZE(GL.UNIFORM_BLOCK_DATA_SIZE),
    //NAME_LENGTH(GL.UNIFORM_BLOCK_NAME_LENGTH),
    ACTIVE_UNIFORMS(GL.UNIFORM_BLOCK_ACTIVE_UNIFORMS),
    //ACTIVE_UNIFORM_INDICES(GL.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES), // UIntArray
    REFERENCED_BY_VERTEX_SHADER(GL.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER), // bool
    REFERENCED_BY_FRAGMENT_SHADER(GL.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER); // bool
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class VertexAttribParam(@JvmField val value: Int) {
    BUFFER_BINDING(GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING), // GLBuffer
    ENABLED(GL.VERTEX_ATTRIB_ARRAY_ENABLED), // bool
    SIZE(GL.VERTEX_ATTRIB_ARRAY_SIZE),
    STRIDE(GL.VERTEX_ATTRIB_ARRAY_STRIDE),
    TYPE(GL.VERTEX_ATTRIB_ARRAY_TYPE), // DataType
    NORMALIZED(GL.VERTEX_ATTRIB_ARRAY_NORMALIZED), // bool
    //CURRENT_VERTEX_ATTRIB(GL.CURRENT_VERTEX_ATTRIB), // 4 elements, floats, ints, or uints
    //POINTER(GL.VERTEX_ATTRIB_ARRAY_POINTER), // pointer; only with glGetVertexAttribPointerv
    @GLES3 INTEGER(GL.VERTEX_ATTRIB_ARRAY_INTEGER), // bool
    @GLES3OrExtension DIVISOR(GL.VERTEX_ATTRIB_ARRAY_DIVISOR);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class BufferTarget(@JvmField val value: Int) {
    ARRAY(GL.ARRAY_BUFFER),
    ELEMENT_ARRAY(GL.ELEMENT_ARRAY_BUFFER),
    @GLES3 COPY_READ(GL.COPY_READ_BUFFER),
    @GLES3 COPY_WRITE(GL.COPY_WRITE_BUFFER),
    @GLES3 TRANSFORM_FEEDBACK(GL.TRANSFORM_FEEDBACK_BUFFER),
    @GLES3 UNIFORM(GL.UNIFORM_BUFFER),
    @GLES3 PIXEL_PACK(GL.PIXEL_PACK_BUFFER),
    @GLES3 PIXEL_UNPACK(GL.PIXEL_UNPACK_BUFFER);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class BufferColorTarget(@JvmField val value: Int) {
    NONE(GL.NONE), BACK(GL.BACK),
    COLOR_ATTACHMENT0(GL.COLOR_ATTACHMENT0),
    COLOR_ATTACHMENT1(GL.COLOR_ATTACHMENT1),
    COLOR_ATTACHMENT2(GL.COLOR_ATTACHMENT2),
    COLOR_ATTACHMENT3(GL.COLOR_ATTACHMENT3),
    COLOR_ATTACHMENT4(GL.COLOR_ATTACHMENT4),
    COLOR_ATTACHMENT5(GL.COLOR_ATTACHMENT5),
    COLOR_ATTACHMENT6(GL.COLOR_ATTACHMENT6),
    COLOR_ATTACHMENT7(GL.COLOR_ATTACHMENT7),
    COLOR_ATTACHMENT8(GL.COLOR_ATTACHMENT8),
    COLOR_ATTACHMENT9(GL.COLOR_ATTACHMENT9),
    COLOR_ATTACHMENT10(GL.COLOR_ATTACHMENT10),
    COLOR_ATTACHMENT11(GL.COLOR_ATTACHMENT11),
    COLOR_ATTACHMENT12(GL.COLOR_ATTACHMENT12),
    COLOR_ATTACHMENT13(GL.COLOR_ATTACHMENT13),
    COLOR_ATTACHMENT14(GL.COLOR_ATTACHMENT14),
    COLOR_ATTACHMENT15(GL.COLOR_ATTACHMENT15);
    companion object {
        fun from(value: Int) = entries.first { it.value == value }
        @Suppress("FunctionName")
        fun COLOR_ATTACHMENT(index: Int) = from(GL.COLOR_ATTACHMENT0 + index)
    }
}

enum class BufferParam(@JvmField val value: Int) {
    SIZE(GL.BUFFER_SIZE),
    USAGE(GL.BUFFER_USAGE), // BufferUsage
    @GLES3 ACCESS_FLAGS(GL.BUFFER_ACCESS_FLAGS), // MapAccessFlags
    @GLES3 MAPPED(GL.BUFFER_MAPPED); // bool
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class BufferParamLong(@JvmField val value: Int) {
    SIZE(GL.BUFFER_SIZE),
    @GLES3 MAP_LENGTH(GL.BUFFER_MAP_LENGTH),
    @GLES3 MAP_OFFSET(GL.BUFFER_MAP_OFFSET);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class BufferUsage(@JvmField val value: Int) {
    STREAM_DRAW(GL.STREAM_DRAW), @GLES3 STREAM_READ(GL.STREAM_READ), @GLES3 STREAM_COPY(GL.STREAM_COPY),
    STATIC_DRAW(GL.STATIC_DRAW), @GLES3 STATIC_READ(GL.STATIC_READ), @GLES3 STATIC_COPY(GL.STATIC_COPY),
    DYNAMIC_DRAW(GL.DYNAMIC_DRAW), @GLES3 DYNAMIC_READ(GL.DYNAMIC_READ), @GLES3 DYNAMIC_COPY(GL.DYNAMIC_COPY);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class MapAccessFlag(@JvmField val value: Int) {
    READ(GL.MAP_READ_BIT), WRITE(GL.MAP_WRITE_BIT), // one of these is required, all others optional
    INVALIDATE_RANGE(GL.MAP_INVALIDATE_RANGE_BIT),  // requires non-READ
    INVALIDATE_BUFFER(GL.MAP_INVALIDATE_BUFFER_BIT), // requires non-READ
    FLUSH_EXPLICIT(GL.MAP_FLUSH_EXPLICIT_BIT), // requires WRITE
    UNSYNCHRONIZED(GL.MAP_UNSYNCHRONIZED_BIT); // requires non-READ
    companion object { fun from(value: Int) = entries.first { it.value == value } }
    operator fun plus(other: MapAccessFlag) = MapAccessFlags(this, other)
}
@GLES3 typealias MapAccessFlags = Set<MapAccessFlag>
@Suppress("FunctionName")
@GLES3 inline fun MapAccessFlags(vararg bits: MapAccessFlag) = bits.toSet()
@Suppress("FunctionName")
@GLES3 inline fun MapAccessFlags(bits: Int) = MapAccessFlag.entries.filter { (it.value and bits) != 0 }.toSet()
@GLES3 inline val MapAccessFlags.value @JvmName("MapAccessFlagsGetValue") get() = sumOf { it.value }

@GLES3
enum class BindBufferTarget(@JvmField val value: Int) {
    TRANSFORM_FEEDBACK(GL.TRANSFORM_FEEDBACK_BUFFER), UNIFORM(GL.UNIFORM_BUFFER);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class FramebufferTarget(@JvmField val value: Int) {
    FRAMEBUFFER(GL.FRAMEBUFFER),
    @GLES3 DRAW_FRAMEBUFFER(GL.DRAW_FRAMEBUFFER), // == FRAMEBUFFER internally
    @GLES3 READ_FRAMEBUFFER(GL.READ_FRAMEBUFFER);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@JvmInline
value class FramebufferAttachment private constructor(val value: Int) {
    companion object {
        // TODO: only allow BACK, DEPTH, STENCIL if framebuffer is not bound?
        val COLOR_ATTACHMENT0 = FramebufferAttachment(GL.COLOR_ATTACHMENT0)
        val DEPTH_ATTACHMENT = FramebufferAttachment(GL.DEPTH_ATTACHMENT)
        val STENCIL_ATTACHMENT = FramebufferAttachment(GL.STENCIL_ATTACHMENT)
        @GLES3 val DEPTH_STENCIL_ATTACHMENT = FramebufferAttachment(GL.DEPTH_STENCIL_ATTACHMENT)
        @GLES3 val COLOR_ATTACHMENT1 = FramebufferAttachment(GL.COLOR_ATTACHMENT1)
        @GLES3 val COLOR_ATTACHMENT2 = FramebufferAttachment(GL.COLOR_ATTACHMENT2)
        @GLES3 val COLOR_ATTACHMENT3 = FramebufferAttachment(GL.COLOR_ATTACHMENT3)
        @GLES3 val COLOR_ATTACHMENT4 = FramebufferAttachment(GL.COLOR_ATTACHMENT4)
        @GLES3 val COLOR_ATTACHMENT5 = FramebufferAttachment(GL.COLOR_ATTACHMENT5)
        @GLES3 val COLOR_ATTACHMENT6 = FramebufferAttachment(GL.COLOR_ATTACHMENT6)
        @GLES3 val COLOR_ATTACHMENT7 = FramebufferAttachment(GL.COLOR_ATTACHMENT7)
        @GLES3 val COLOR_ATTACHMENT8 = FramebufferAttachment(GL.COLOR_ATTACHMENT8)
        @GLES3 val COLOR_ATTACHMENT9 = FramebufferAttachment(GL.COLOR_ATTACHMENT9)
        @GLES3 val COLOR_ATTACHMENT10 = FramebufferAttachment(GL.COLOR_ATTACHMENT10)
        @GLES3 val COLOR_ATTACHMENT11 = FramebufferAttachment(GL.COLOR_ATTACHMENT11)
        @GLES3 val COLOR_ATTACHMENT12 = FramebufferAttachment(GL.COLOR_ATTACHMENT12)
        @GLES3 val COLOR_ATTACHMENT13 = FramebufferAttachment(GL.COLOR_ATTACHMENT13)
        @GLES3 val COLOR_ATTACHMENT14 = FramebufferAttachment(GL.COLOR_ATTACHMENT14)
        @GLES3 val COLOR_ATTACHMENT15 = FramebufferAttachment(GL.COLOR_ATTACHMENT15)
        @Suppress("FunctionName")
        @GLES3 fun COLOR_ATTACHMENT(n: Int) = FramebufferAttachment(GL.COLOR_ATTACHMENT0 + n)
        fun from(value: Int) = FramebufferAttachment(value)
    }
}

enum class FramebufferAttachmentParam(@JvmField val value: Int) {
    OBJECT_TYPE(GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE), // FramebufferAttachmentObjectType
    OBJECT_NAME(GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME), // GLRenderbuffer or GLTexture
    TEXTURE_LEVEL(GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL),
    TEXTURE_CUBE_MAP_FACE(GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE), // TextureCubeFace
    @GLES3 RED_SIZE(GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE),
    @GLES3 GREEN_SIZE(GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE),
    @GLES3 BLUE_SIZE(GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE),
    @GLES3 ALPHA_SIZE(GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE),
    @GLES3 DEPTH_SIZE(GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE),
    @GLES3 STENCIL_SIZE(GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE),
    @GLES3 COMPONENT_TYPE(GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE), // FramebufferAttachmentComponentType
    @GLES3 COLOR_ENCODING(GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING), // ColorEncoding
    @GLES3 TEXTURE_LAYER(GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER),

    // Extensions
    COLOR_ENCODING_EXT(EXT_sRGB.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT); // == FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class FramebufferAttachmentObjectType(@JvmField val value: Int) {
    NONE(GL.NONE),
    TEXTURE(GL.TEXTURE),
    RENDERBUFFER(GL.RENDERBUFFER),
    @GLES3 FRAMEBUFFER_DEFAULT(GL.FRAMEBUFFER_DEFAULT);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class FramebufferAttachmentComponentType(@JvmField val value: Int) {
    FLOAT(GL.FLOAT), INT(GL.INT), UNSIGNED_INT(GL.UNSIGNED_INT),
    SIGNED_NORMALIZED(GL.SIGNED_NORMALIZED),
    UNSIGNED_NORMALIZED(GL.UNSIGNED_NORMALIZED);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3OrExtension
enum class ColorEncoding(@JvmField val value: Int) {
    LINEAR(GL.LINEAR), SRGB(GL.SRGB);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class FramebufferStatus(@JvmField val value: Int) {
    COMPLETE(GL.FRAMEBUFFER_COMPLETE),
    INCOMPLETE_ATTACHMENT(GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT),
    INCOMPLETE_MISSING_ATTACHMENT(GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT),
    INCOMPLETE_DIMENSIONS(GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS),
    UNSUPPORTED(GL.FRAMEBUFFER_UNSUPPORTED),
    @GLES3 UNDEFINED(GL.FRAMEBUFFER_UNDEFINED),
    @GLES3 INCOMPLETE_MULTISAMPLE(GL.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class PixelFormat(@JvmField val value: Int) {
    // TODO: only supports: RGBA, RGBA_INTEGER, and the one returned by getInt(GL.IMPLEMENTATION_COLOR_READ_FORMAT)
    RGBA(GL.RGBA), @GLES3 RGBA_INTEGER(GL.RGBA_INTEGER),

    RGB(GL.RGB), ALPHA(GL.ALPHA),
    @GLES3 RED(GL.RED), @GLES3 RG(GL.RG),
    @GLES3 RED_INTEGER(GL.RED_INTEGER),
    @GLES3 RG_INTEGER(GL.RG_INTEGER),
    @GLES3 RGB_INTEGER(GL.RGB_INTEGER),
    @GLES3 LUMINANCE(GL.LUMINANCE),
    @GLES3 LUMINANCE_ALPHA(GL.LUMINANCE_ALPHA);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class PixelType(@JvmField val value: Int) {
    // TODO: only supports: UNSIGNED_BYTE, UNSIGNED_INT, INT, FLOAT, and the one returned by getInt(GL.IMPLEMENTATION_COLOR_READ_TYPE)
    UNSIGNED_BYTE(GL.UNSIGNED_BYTE),
    @GLES3 UNSIGNED_INT(GL.UNSIGNED_INT),
    @GLES3 INT(GL.INT),
    FLOAT(GL.FLOAT),

    UNSIGNED_SHORT_5_6_5(GL.UNSIGNED_SHORT_5_6_5),
    UNSIGNED_SHORT_4_4_4_4(GL.UNSIGNED_SHORT_4_4_4_4),
    UNSIGNED_SHORT_5_5_5_1(GL.UNSIGNED_SHORT_5_5_5_1),

    @GLES3 BYTE(GL.BYTE),
    @GLES3 SHORT(GL.SHORT), @GLES3 UNSIGNED_SHORT(GL.UNSIGNED_SHORT),
    @GLES3 UNSIGNED_INT_2_10_10_10_REV(GL.UNSIGNED_INT_2_10_10_10_REV),
    @GLES3 UNSIGNED_INT_10F_11F_11F_REV(GL.UNSIGNED_INT_10F_11F_11F_REV),
    @GLES3 UNSIGNED_INT_5_9_9_9_REV(GL.UNSIGNED_INT_5_9_9_9_REV),
    @GLES3 HALF_FLOAT(GL.HALF_FLOAT);
    companion object { fun from(value: Int) = DataType.entries.first { it.value == value } }
}

enum class RenderbufferTarget(@JvmField val value: Int) {
    RENDERBUFFER(GL.RENDERBUFFER);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class RenderbufferParam(@JvmField val value: Int) {
    WIDTH(GL.RENDERBUFFER_WIDTH),
    HEIGHT(GL.RENDERBUFFER_HEIGHT),
    INTERNAL_FORMAT(GL.RENDERBUFFER_INTERNAL_FORMAT), // RenderbufferInternalFormat
    RED_SIZE(GL.RENDERBUFFER_RED_SIZE),
    GREEN_SIZE(GL.RENDERBUFFER_GREEN_SIZE),
    BLUE_SIZE(GL.RENDERBUFFER_BLUE_SIZE),
    ALPHA_SIZE(GL.RENDERBUFFER_ALPHA_SIZE),
    DEPTH_SIZE(GL.RENDERBUFFER_DEPTH_SIZE),
    STENCIL_SIZE(GL.RENDERBUFFER_STENCIL_SIZE),
    @GLES3 SAMPLES(GL.RENDERBUFFER_SAMPLES);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class RenderbufferInternalFormat(@JvmField val value: Int) {
    RGBA4(GL.RGBA4), RGB565(GL.RGB565), RGB5_A1(GL.RGB5_A1),

    @GLES3 R8(GL.R8), @GLES3 R8UI(GL.R8UI), @GLES3 R8I(GL.R8I), @GLES3 R16UI(GL.R16UI), @GLES3 R16I(GL.R16I), @GLES3 R32UI(GL.R32UI), @GLES3 R32I(GL.R32I),
    @GLES3 RG8(GL.RG8), @GLES3 RG8UI(GL.RG8UI), @GLES3 RG8I(GL.RG8I), @GLES3 RG16UI(GL.RG16UI), @GLES3 RG16I(GL.RG16I), @GLES3 RG32UI(GL.RG32UI), @GLES3 RG32I(GL.RG32I),
    @GLES3 RGB8(GL.RGB8), @GLES3 RGBA8(GL.RGBA8), @GLES3 RGB10_A2(GL.RGB10_A2), @GLES3 RGBA8UI(GL.RGBA8UI), @GLES3 RGBA8I(GL.RGBA8I),
    @GLES3 RGB10_A2UI(GL.RGB10_A2UI), @GLES3 RGBA16UI(GL.RGBA16UI), @GLES3 RGBA16I(GL.RGBA16I), @GLES3 RGBA32I(GL.RGBA32I), @GLES3 RGBA32UI(GL.RGBA32UI),
    @GLES3 SRGB8_ALPHA8(GL.SRGB8_ALPHA8),

    @GLES3 DEPTH_COMPONENT(GL.DEPTH_COMPONENT),
    DEPTH_COMPONENT16(GL.DEPTH_COMPONENT16),
    @GLES3 DEPTH_COMPONENT24(GL.DEPTH_COMPONENT24),
    @GLES3 DEPTH_COMPONENT32F(GL.DEPTH_COMPONENT32F),

    STENCIL_INDEX8(GL.STENCIL_INDEX8),

    @GLES3 DEPTH_STENCIL(GL.DEPTH_STENCIL), // not supported by renderbufferStorageMultisample()
    @GLES3 DEPTH24_STENCIL8(GL.DEPTH24_STENCIL8),
    @GLES3 DEPTH32F_STENCIL8(GL.DEPTH32F_STENCIL8),

    @GLES3 R16F(GL.R16F), @GLES3 RG16F(GL.RG16F), @GLES3 RGB16F(GL.RGB16F), @GLES3 RGBA16F(GL.RGBA16F),
    @GLES3 R32F(GL.R32F), @GLES3 RG32F(GL.RG32F), @GLES3 RGB32F(GL.RGB32F), @GLES3 RGBA32F(GL.RGBA32F),
    @GLES3 R11F_G11F_B10F(GL.R11F_G11F_B10F);

    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class TextureTarget(@JvmField val value: Int) {
    TEXTURE_2D(GL.TEXTURE_2D),
    CUBE_MAP(GL.TEXTURE_CUBE_MAP),
    @GLES3 TEXTURE_3D(GL.TEXTURE_3D),
    @GLES3 TEXTURE_2D_ARRAY(GL.TEXTURE_2D_ARRAY),;
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class TextureTarget2D(@JvmField val value: Int) {
    TEXTURE_2D(GL.TEXTURE_2D),
    POSITIVE_X(GL.TEXTURE_CUBE_MAP_POSITIVE_X),
    NEGATIVE_X(GL.TEXTURE_CUBE_MAP_NEGATIVE_X),
    POSITIVE_Y(GL.TEXTURE_CUBE_MAP_POSITIVE_Y),
    NEGATIVE_Y(GL.TEXTURE_CUBE_MAP_NEGATIVE_Y),
    POSITIVE_Z(GL.TEXTURE_CUBE_MAP_POSITIVE_Z),
    NEGATIVE_Z(GL.TEXTURE_CUBE_MAP_NEGATIVE_Z);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class TextureCubeFace(@JvmField val value: Int) {
    POSITIVE_X(GL.TEXTURE_CUBE_MAP_POSITIVE_X),
    NEGATIVE_X(GL.TEXTURE_CUBE_MAP_NEGATIVE_X),
    POSITIVE_Y(GL.TEXTURE_CUBE_MAP_POSITIVE_Y),
    NEGATIVE_Y(GL.TEXTURE_CUBE_MAP_NEGATIVE_Y),
    POSITIVE_Z(GL.TEXTURE_CUBE_MAP_POSITIVE_Z),
    NEGATIVE_Z(GL.TEXTURE_CUBE_MAP_NEGATIVE_Z);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class TextureIntParam(@JvmField val value: Int) {
    MAG_FILTER(GL.TEXTURE_MAG_FILTER), // MagFilter
    MIN_FILTER(GL.TEXTURE_MIN_FILTER), // MinFilter
    WRAP_S(GL.TEXTURE_WRAP_S), // Wrap
    WRAP_T(GL.TEXTURE_WRAP_T), // Wrap
    @GLES3 WRAP_R(GL.TEXTURE_WRAP_R), // Wrap
    @GLES3 COMPARE_FUNC(GL.TEXTURE_COMPARE_FUNC), // ComparisonFunc
    @GLES3 COMPARE_MODE(GL.TEXTURE_COMPARE_MODE), // ComparisonMode
    @GLES3 BASE_LEVEL(GL.TEXTURE_BASE_LEVEL),
    @GLES3 MAX_LEVEL(GL.TEXTURE_MAX_LEVEL),
    @GLES3 IMMUTABLE_FORMAT(GL.TEXTURE_IMMUTABLE_FORMAT), // bool
    @GLES3 IMMUTABLE_LEVELS(GL.TEXTURE_IMMUTABLE_LEVELS),
    @GLES3 SWIZZLE_R(GL.TEXTURE_SWIZZLE_R), // ColorSwizzle
    @GLES3 SWIZZLE_G(GL.TEXTURE_SWIZZLE_G), // ColorSwizzle
    @GLES3 SWIZZLE_B(GL.TEXTURE_SWIZZLE_B), // ColorSwizzle
    @GLES3 SWIZZLE_A(GL.TEXTURE_SWIZZLE_A); // ColorSwizzle
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class ColorSwizzle(@JvmField val value: Int) {
    RED(GL.RED), GREEN(GL.GREEN), BLUE(GL.BLUE), ALPHA(GL.ALPHA), ZERO(GL.ZERO), ONE(GL.ONE);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class TextureFloatParam(@JvmField val value: Int) {
    MAX_ANISOTROPY_EXT(EXT_texture_filter_anisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT),
    @GLES3 MAX_LOD(GL.TEXTURE_MAX_LOD), @GLES3 MIN_LOD(GL.TEXTURE_MIN_LOD);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class TextureInternalFormat(@JvmField val value: Int) {
    ALPHA(GL.ALPHA),
    RGB(GL.RGB),
    RGBA(GL.RGBA),
    LUMINANCE(GL.LUMINANCE),
    LUMINANCE_ALPHA(GL.LUMINANCE_ALPHA);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@JvmInline
value class TextureUnit private constructor(val value: Int) {
    companion object {
        val TEXTURE0 = TextureUnit(GL.TEXTURE0)
        val TEXTURE1 = TextureUnit(GL.TEXTURE1)
        val TEXTURE2 = TextureUnit(GL.TEXTURE2)
        val TEXTURE3 = TextureUnit(GL.TEXTURE3)
        val TEXTURE4 = TextureUnit(GL.TEXTURE4)
        val TEXTURE5 = TextureUnit(GL.TEXTURE5)
        val TEXTURE6 = TextureUnit(GL.TEXTURE6)
        val TEXTURE7 = TextureUnit(GL.TEXTURE7)
        val TEXTURE8 = TextureUnit(GL.TEXTURE8)
        val TEXTURE9 = TextureUnit(GL.TEXTURE9)
        val TEXTURE10 = TextureUnit(GL.TEXTURE10)
        val TEXTURE11 = TextureUnit(GL.TEXTURE11)
        val TEXTURE12 = TextureUnit(GL.TEXTURE12)
        val TEXTURE13 = TextureUnit(GL.TEXTURE13)
        val TEXTURE14 = TextureUnit(GL.TEXTURE14)
        val TEXTURE15 = TextureUnit(GL.TEXTURE15)
        val TEXTURE16 = TextureUnit(GL.TEXTURE16)
        val TEXTURE17 = TextureUnit(GL.TEXTURE17)
        val TEXTURE18 = TextureUnit(GL.TEXTURE18)
        val TEXTURE19 = TextureUnit(GL.TEXTURE19)
        val TEXTURE20 = TextureUnit(GL.TEXTURE20)
        val TEXTURE21 = TextureUnit(GL.TEXTURE21)
        val TEXTURE22 = TextureUnit(GL.TEXTURE22)
        val TEXTURE23 = TextureUnit(GL.TEXTURE23)
        val TEXTURE24 = TextureUnit(GL.TEXTURE24)
        val TEXTURE25 = TextureUnit(GL.TEXTURE25)
        val TEXTURE26 = TextureUnit(GL.TEXTURE26)
        val TEXTURE27 = TextureUnit(GL.TEXTURE27)
        val TEXTURE28 = TextureUnit(GL.TEXTURE28)
        val TEXTURE29 = TextureUnit(GL.TEXTURE29)
        val TEXTURE30 = TextureUnit(GL.TEXTURE30)
        val TEXTURE31 = TextureUnit(GL.TEXTURE31)

        @Suppress("FunctionName")
        fun TEXTURE(n: Int) = TextureUnit(GL.TEXTURE0 + n)
        fun from(value: Int): TextureUnit {
            require(value >= GL.TEXTURE0 && value <= GL.TEXTURE31)
            return TextureUnit(value)
        }
    }
}

enum class MagFilter(@JvmField val value: Int) {
    NEAREST(GL.NEAREST), LINEAR(GL.LINEAR);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class MinFilter(@JvmField val value: Int) {
    NEAREST(GL.NEAREST), LINEAR(GL.LINEAR),
    NEAREST_MIPMAP_NEAREST(GL.NEAREST_MIPMAP_NEAREST),
    LINEAR_MIPMAP_NEAREST(GL.LINEAR_MIPMAP_NEAREST),
    NEAREST_MIPMAP_LINEAR(GL.NEAREST_MIPMAP_LINEAR),
    LINEAR_MIPMAP_LINEAR(GL.LINEAR_MIPMAP_LINEAR);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

enum class Wrap(@JvmField val value: Int) {
    REPEAT(GL.REPEAT),
    CLAMP_TO_EDGE(GL.CLAMP_TO_EDGE),
    MIRRORED_REPEAT(GL.MIRRORED_REPEAT);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class SamplerIntParam(@JvmField val value: Int) {
    MAG_FILTER(GL.TEXTURE_MAG_FILTER), // MaxFilter
    MIN_FILTER(GL.TEXTURE_MIN_FILTER), // MinFilter
    WRAP_S(GL.TEXTURE_WRAP_S), // Wrap
    WRAP_T(GL.TEXTURE_WRAP_T), // Wrap
    WRAP_R(GL.TEXTURE_WRAP_R), // Wrap
    COMPARE_FUNC(GL.TEXTURE_COMPARE_FUNC), // ComparisonFunc
    COMPARE_MODE(GL.TEXTURE_COMPARE_MODE); // ComparisonMode
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class SamplerFloatParam(@JvmField val value: Int) {
    MAX_ANISOTROPY_EXT(EXT_texture_filter_anisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT),
    MAX_LOD(GL.TEXTURE_MAX_LOD), MIN_LOD(GL.TEXTURE_MIN_LOD);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class QueryTarget(@JvmField val value: Int) {
    ANY_SAMPLES_PASSED(GL.ANY_SAMPLES_PASSED),
    ANY_SAMPLES_PASSED_CONSERVATIVE(GL.ANY_SAMPLES_PASSED_CONSERVATIVE),
    TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN(GL.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class QueryParam(@JvmField val value: Int) {
    QUERY_RESULT_AVAILABLE(GL.QUERY_RESULT_AVAILABLE), // bool
    QUERY_RESULT(GL.QUERY_RESULT);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class SyncWaitFlag(@JvmField val value: Int) {
    FLUSH_COMMANDS_BIT(GL.SYNC_FLUSH_COMMANDS_BIT);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
    operator fun plus(other: SyncWaitFlag) = SyncWaitFlags(this, other)
}
@GLES3 typealias SyncWaitFlags = Set<SyncWaitFlag>
@Suppress("FunctionName")
@GLES3 inline fun SyncWaitFlags(vararg bits: SyncWaitFlag) = bits.toSet()
@Suppress("FunctionName")
@GLES3 inline fun SyncWaitFlags(bits: Int) = SyncWaitFlag.entries.filter { (it.value and bits) != 0 }.toSet()
@GLES3 inline val SyncWaitFlags.value @JvmName("SyncWaitFlagsGetValue") get() = sumOf { it.value }

@GLES3
enum class SyncWaitStatus(@JvmField val value: Int) {
    ALREADY_SIGNALED(GL.ALREADY_SIGNALED),
    TIMEOUT_EXPIRED(GL.TIMEOUT_EXPIRED),
    CONDITION_SATISFIED(GL.CONDITION_SATISFIED),
    WAIT_FAILED(GL.WAIT_FAILED);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class SyncParam(@JvmField val value: Int) {
    OBJECT_TYPE(GL.OBJECT_TYPE), // SyncType (always FENCE)
    CONDITION(GL.SYNC_CONDITION), // SyncCondition (always GPU_COMMANDS_COMPLETE)
    STATUS(GL.SYNC_STATUS), // SyncStatus
    FLAGS(GL.SYNC_FLAGS); //  always 0
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class SyncType(@JvmField val value: Int) {
    FENCE(GL.SYNC_FENCE);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class SyncStatus(@JvmField val value: Int) {
    UNSIGNALED(GL.UNSIGNALED),
    SIGNALED(GL.SIGNALED);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class SyncCondition(@JvmField val value: Int) {
    GPU_COMMANDS_COMPLETE(GL.SYNC_GPU_COMMANDS_COMPLETE);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

@GLES3
enum class PrimitiveMode(@JvmField val value: Int) {
    POINTS(GL.POINTS), LINES(GL.LINES), TRIANGLES(GL.TRIANGLES);
    companion object { fun from(value: Int) = entries.first { it.value == value } }
}

// Not used anywhere:
//    const val SRGB = 0x8C40
//    const val SRGB8 = 0x8C41
//    const val RGB9_E5 = 0x8C3D
//    const val R8_SNORM = 0x8F94
//    const val RG8_SNORM = 0x8F95
//    const val RGB8_SNORM = 0x8F96
//    const val RGBA8_SNORM = 0x8F97
//    const val FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD
//    const val UNSIGNED_INT_24_8 = 0x84FA

//    const val COMPRESSED_R11_EAC = 0x9270
//    const val COMPRESSED_SIGNED_R11_EAC = 0x9271
//    const val COMPRESSED_RG11_EAC = 0x9272
//    const val COMPRESSED_SIGNED_RG11_EAC = 0x9273
//    const val COMPRESSED_RGB8_ETC2 = 0x9274
//    const val COMPRESSED_SRGB8_ETC2 = 0x9275
//    const val COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276
//    const val COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277
//    const val COMPRESSED_RGBA8_ETC2_EAC = 0x9278
//    const val COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279
